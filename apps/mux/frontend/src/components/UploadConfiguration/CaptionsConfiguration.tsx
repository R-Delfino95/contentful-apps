import { FC, useState } from 'react';
import {
  FormControl,
  Select,
  Option,
  Checkbox,
  TextInput,
  Stack,
  TextLink,
} from '@contentful/f36-components';
import { ExternalLinkIcon } from '@contentful/f36-icons';
import CountryDatalist from '../countryDatalist';
import { countries } from '../../util/countries';
import { autoGeneratedLanguages } from '../../util/autoGeneratedLanguages';
import AutoGeneratedLanguagesDatalist from '../AutoGeneratedLanguagesDatalist';

export type CaptionsConfig =
  | {
      captionsType: 'off';
      languageCode?: null;
      languageName?: null;
      closedCaptions?: null;
      url?: null;
    }
  | {
      captionsType: 'auto' | 'custom';
      languageCode: string;
      languageName: string;
      closedCaptions?: boolean;
      url?: string;
    };

interface CaptionsConfigurationProps {
  value: CaptionsConfig;
  onChange: (value: CaptionsConfig) => void;
}

const captionsTypeDescriptions: Record<string, string> = {
  off: 'No captions will be added to your video.',
  auto: 'Captions will be automatically generated based on the spoken language in your video.',
  custom:
    'Upload your own captions file. You can specify the language and whether they are closed captions.',
};

const customCaptionsLink = 'https://www.mux.com/docs/guides/add-subtitles-to-your-videos';
const autoCaptionsLink =
  'https://www.mux.com/docs/guides/add-autogenerated-captions-and-use-transcripts';

export const CaptionsConfiguration: FC<CaptionsConfigurationProps> = ({ value, onChange }) => {
  const [languageInputValue, setLanguageInputValue] = useState('');

  const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newType = e.target.value as 'off' | 'auto' | 'custom';
    setLanguageInputValue('');
    if (newType === 'off') {
      onChange({ captionsType: 'off' });
    } else {
      onChange({
        captionsType: newType,
        languageCode: '',
        languageName: '',
        closedCaptions: false,
        url: '',
      });
    }
  };

  const handleLanguageInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    setLanguageInputValue(inputValue);
    let found;
    if (value.captionsType === 'auto') {
      found = autoGeneratedLanguages.find((l) => l.language === inputValue);
    } else if (value.captionsType === 'custom') {
      found = countries.find((l) => l.name === inputValue);
    }
    onChange({
      ...value,
      languageCode: found ? found.code : '',
      languageName: found ? (value.captionsType === 'auto' ? found.language : found.name) : '',
    });
  };

  const handleClosedCaptionsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (value.captionsType !== 'off') {
      onChange({ ...value, closedCaptions: e.target.checked });
    }
  };

  const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (value.captionsType !== 'off') {
      onChange({ ...value, url: e.target.value });
    }
  };

  return (
    <Stack flexDirection="column" spacing="spacingXs">
      <FormControl>
        <FormControl.Label>Captions Type</FormControl.Label>
        <Select value={value.captionsType} onChange={handleTypeChange} name="captionsType">
          <Option value="off">Off</Option>
          <Option value="auto">Auto Generated Captions</Option>
          <Option value="custom">Custom Captions</Option>
        </Select>
        <FormControl.HelpText>
          {captionsTypeDescriptions[value.captionsType]}
          {value.captionsType !== 'off' && (
            <TextLink
              icon={<ExternalLinkIcon />}
              variant="secondary"
              href={value.captionsType === 'auto' ? autoCaptionsLink : customCaptionsLink}
              target="_blank"
              rel="noopener noreferrer"
            />
          )}
        </FormControl.HelpText>
      </FormControl>

      {value.captionsType !== 'off' && (
        <>
          <FormControl>
            <FormControl.Label>Language</FormControl.Label>
            <TextInput
              name="language"
              list={value.captionsType === 'auto' ? 'autogenlanguages' : 'countrycodes'}
              onChange={handleLanguageInput}
              value={languageInputValue}
              placeholder="Type or select a language"
            />
            {value.captionsType === 'custom' && <CountryDatalist used={undefined} />}
            {value.captionsType === 'auto' && (
              <>
                <AutoGeneratedLanguagesDatalist />
                <FormControl.HelpText>
                  'For accurate handling, make sure you select the spoken language in your video.'
                </FormControl.HelpText>
              </>
            )}
          </FormControl>

          {value.captionsType === 'custom' && (
            <>
              <FormControl>
                <Checkbox
                  isChecked={!!value.closedCaptions}
                  onChange={handleClosedCaptionsChange}
                  name="closedCaptions">
                  Closed Captions
                </Checkbox>
                <FormControl.HelpText>
                  Enable this if your captions are intended for the hearing impaired.
                </FormControl.HelpText>
              </FormControl>

              <FormControl>
                <FormControl.Label>Captions File URL</FormControl.Label>
                <TextInput
                  value={value.url || ''}
                  onChange={handleUrlChange}
                  name="captionUrl"
                  placeholder="https://example.com/captions.vtt"
                />
                <FormControl.HelpText>
                  Provide the URL to your captions file (e.g., .vtt or .srt).
                </FormControl.HelpText>
              </FormControl>
            </>
          )}
        </>
      )}
    </Stack>
  );
};

export default CaptionsConfiguration;
